---



AWSTemplateFormatVersion: '2010-09-09'

  

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: csye6225-fall2018-assignment3
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: EC2 instance type must be valid.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
 
  SubnetA:
    Type: String
    
  SubnetB:
    Type: String
    
  myVPC:
    Type: String  




    



Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      AvailabilityZone: us-east-1a
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
      - Ref: WebServerSecurityGroup

      KeyName:
        Ref: KeyName
      ImageId: ami-9887c6e7
      BlockDeviceMappings:
      - DeviceName: "/dev/sdm"
        Ebs:
          VolumeType: gp2
          VolumeSize: '20'

          



  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access on port 22, 80 and 443
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
          Ref: SSHLocation         



  RDSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access on port 3306
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref WebServerSecurityGroup

  myDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "S"
      TableName: "csye6225-fall2018"
      KeySchema: 
      - AttributeName: "id"
        KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  myS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: csye6225-fall2018-reubenn.me.csye6225.com

  myRDSinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100 
      DBInstanceClass: "db.t2.micro"
      DBInstanceIdentifier: "csye6225-Fall2018"
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBName: "csye6225"
      Engine: MySQL
      MasterUsername: "csye6225master"
      MasterUserPassword: "csye6225password"
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !GetAtt RDSInstanceSecurityGroup.GroupId
        
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "description"
      SubnetIds: 
        - !Ref SubnetA
        - !Ref SubnetB

  UserData: 
    "Fn::Base64": 
     "Fn::Join": 
      - 
   ""
      - 
   - 
   "#!/bin/bash -xe \n"
       - 
   "sudo apt-get update \n"
       - 
   "sudo apt-get install openjdk-8-jdk -y\n"
       - 
   "sudo apt-get install ruby -y \n"
       - 
   "sudo apt-get install wget -y \n"
       - 
   "sudo apt-get install python -y \n"
       - 
   "sudo apt-get update \n"
       - 
   "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n"
       - 
   "sudo chmod +x ./install \n"
       - 
   "sudo ./install auto \n"
       - 
   "sudo service codedeploy-agent start \n"
       - 
   "sudo apt-get install tomcat8 -y \n"
       - 
   "sudo service tomcat8 restart \n"
       - 
   "cd /usr/share/tomcat8/bin \n"
       - 
   "sudo touch setenv.sh \n"
       - 
   "sudo chmod 777 setenv.sh \n"
       - 
   "sudo echo '#!/bin/sh' >> setenv.sh \n"
       - 
   "Fn::Join": 
         - 
   ""
         - 
   - 
   "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://"
          - 
   "Fn::GetAtt": 
            - 
   myRDSInstance
            - 
   "Endpoint.Address"
          - 
   ":3306/csye6225\"' >> setenv.sh \n"
       - 
   "Fn::Join": 
         - 
   ""
         - 
   - 
   "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username="
          - 
   Ref: MasterUsername
          - 
   "\"' >> setenv.sh \n"
       - 
   "Fn::Join": 
         - 
   ""
         - 
   - 
   "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password="
          - 
   Ref: MasterPassword
          - 
   "\"' >> setenv.sh \n"
       - 
   "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=aws\"' >> setenv.sh \n"
       - 
   "sudo service tomcat8 restart \n"
       - 
   "sudo apt-get update \n"
       - 
   "sudo touch /tmp/awslogs.conf \n"
       - 
   "sudo chmod 777 /tmp/awslogs.conf \n"
       - 
   "sudo echo '[general]' > /tmp/awslogs.conf \n"
       - 
   "sudo echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf \n"
       - 
   "sudo echo '[logstream1]' >> /tmp/awslogs.conf \n"
       - 
   "sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> /tmp/awslogs.conf \n"
       - 
   "sudo echo 'log_group_name = csye6225-webapp' >> /tmp/awslogs.conf \n"
       - 
   "sudo echo 'log_stream_name = csye6225-webapp' >> /tmp/awslogs.conf \n"
       - 
   "sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf \n"
       - 
   "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O \n"
       - 
   "Fn::Join": 
         - 
   " "
         - 
   - 
   "sudo python ./awslogs-agent-setup.py -n -r"
          - 
   Ref: "AWS::Region"
          - 
   "-c /tmp/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup' \n"
       - 
   "cd /etc/systemd/system \n"
       - 
   "sudo touch awslogs.service \n"
       - 
   "sudo echo '[Unit]' >> awslogs.service \n"
       - 
   "sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service \n"
       - 
   "sudo echo 'After=rc-local.service' >> awslogs.service \n"
       - 
   "sudo echo '[Service]' >> awslogs.service \n"
       - 
   "sudo echo 'Type=simple' >> awslogs.service \n"
       - 
   "sudo echo 'Restart=always' >> awslogs.service \n"
       - 
   "sudo echo 'KillMode=process' >> awslogs.service \n"
       - 
   "sudo echo 'TimeoutSec=infinity' >> awslogs.service \n"
       - 
   "sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service \n"
       - 
   "sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service \n"
       - 
   "sudo echo '[Install]' >> awslogs.service \n"
       - 
   "sudo echo 'WantedBy=multi-user.target' >> awslogs.service \n"
       - 
   "sudo systemctl start awslogs.service \n"
       - 
   "sudo systemctl enable awslogs.service \n"

          

          

Outputs:

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance

  SecurityGroupID:    Description: SecurityGroupId of newly created group
    Value:
      Ref: RDSInstanceSecurityGroup



  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - AvailabilityZone

